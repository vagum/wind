Всё в старом проекте wind!

Временные метки по видео предыдущего урока:
20.35 переходим в Admin/Post/PostController.php в метод index
21.25 объяснение что и как работает в кеше
21.54 заходим на страницу в админке с индексом постов и смотрим таблицу cache в базе
22.20 про то что у кеша надо разные имена иначе будет проблема
23.14 вписываем в Admin/Post/PostController.php генерацию уникальных CacheName для фильтров
23.41 с помощью MD5 сокращаем длинную строку фильтров до короткой
23.53 прописываем $cacheName в return кеша
24.25 смотрим чего назаписывалось в базу в таблицу cache
24.49 убираем кеш из PostController.php, чтобы разбирать Laravel Telescope
25.03 про то что такое Laravel Telescope и как он лучше для отладки чем xDebug
25.15 смотрим доку по Laravel Telescope
      https://laravel.su/docs/11.x/telescope
25.19 устанавливаем Telescope
      composer require laravel/telescope
      php artisan telescope:install
      php artisan migrate

      сбрасываем кеш у роутов т.к. у меня иначе 404 ошибка вместо телескопа:
      php artisan route:cache

26.03 смотрим телескоп в http://127.0.0.1:8000/telescope
26.28 идем смотреть queries в REQUESTS т.к. их чаще смотрят
26.46 самые главные места где тормоза
27.01 идем в конроллер в метод страничку которого дебажим и ищем там ресурс
27.06 переходим в Admin/Post/PostResource.php
27.23 чтобы повторных вызовов избежать делаем ->with('category')
27.45 делаем F5 на странице которую отлаживаем
27.51 смотрим в телескопе насколько стало лучше
28.24 смотрим чего там еще такое дублируется в ресурсе
28.36 идем в модель Post в is_liked, ищем для этого getIsLikeAttribute
26.54 копируем отношение у постов LikedProfiles
29.04 вставляем в PostController.php массивом к ->with(['category','LikedProfiles'])
29.09 делаем F5 на странице и смотрим что получилось в телескопе
33.33 что такое Mapper и зачем это надо
34.17 php artisan make:class Mappers/PostMapper
32.24 правки в PostController.php для маппера PostMapper:index()
34.57 переносим из PostController.php обращение к модели и ресурсу в маппер
37.08 чтобы не ломалось в месте Request::wantsJson в PostController.php делаем PostMapper::indexAsJson
39.35 оттолкнулись от проблемы в PostController.php
40.22 про то что дубляж это не дубляж
40.42 убираем то что возвращаем чтобы посмотреть куда выведет
41.17 про то что уместно продублировать в PostMapper из-за разных направленностей
41.50 в чем фишка меппера и чем отличается от ресурса
43.07 про то что можно сделать геттер в моделе и его использовать в ресурсе и далее в шаблоне блейда
45.20 про две фронтовские темы что остались
45.31 про то что Computed должен заниматься бэкенд
46.08 смотрим Admin/Post/Index.php
46.33 смотрим про name: 'Boris'
47.05 про то что Computed позволяет сделать геттер и поменять любой атрибут
47.24 прописываем Computed в шаблоне
47.46 смотрим в браузере как поменялся 'Boris'
48.48 ответ на вопрос можем ли мы менять Computed и происходит ли рендеринг при этом
49.10 пример метода для смены Computed
51.04 еще один ход чтобы показать что он не реактивный
51.32 Modal не модальное окно, а концепция
51.56 вставляем блок div в шаблон
53.25 смотрим что получилось в браузере
53.37 дописываем "усы"
53.46 где это пригождается: "отзывы", "карусели", "попапы" и т.д.
54.31 смотрим пример Computed для изменения стилей для разного уровня вложенности ответов на комменты
54.59 смотрим в браузере как выглядят эти комменты и ответы на комменты. разный цвет фона, чтобы не сливался.
55.53 про Laravel Pint
56.09 смотрим доку по Laravel Pint в браузере
      https://laravel.su/docs/11.x/pint
56.29 настройка в Phpstorm Laravel Pint
59.35 смотрим пример форматирования
1.00.02 жмем Cntrl+z и смотрим комбинацию клавиш в Phpstorm которая делает то же самое по Cntrl + Alt + L

